{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\m50053370\\\\projet_git\\\\IMS-react\\\\frontend\\\\src\\\\pages\\\\DashboardPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../component/Layout\";\nimport ApiService from \"../service/ApiService\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardPage = () => {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [selectedData, setSelectedData] = useState(\"amount\");\n  //veruble to store and set transaction data formated for chart display\n  const [transactionData, setTransactionData] = useState({});\n\n  //fetch transaction data from the backend\n\n  const [total_sales, setTotalSales] = useState(0);\n  const [total_price, setTotalPrice] = useState(0);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const transactionResponse = await ApiService.getAllTransactions();\n        if (transactionResponse.status === 200) {\n          setTransactionData(transformTransactionData(transactionResponse.transactions, selectedMonth, selectedYear));\n        }\n      } catch (error) {\n        var _error$response, _error$response$data;\n        showMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Error Loggin in a User: \" + error);\n      }\n    };\n    fetchData();\n  }, [selectedMonth, selectedYear, selectedData]);\n  //fetch total sales and total price\n  useEffect(() => {\n    const fetchTotals = async () => {\n      try {\n        const salesResponse = await ApiService.countSales();\n        if (salesResponse.status === 200) {\n          setTotalSales(salesResponse.totalSales);\n        }\n      } catch (error) {\n        var _error$response2, _error$response2$data;\n        showMessage(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Error Fetching Totals: \" + error);\n      }\n    };\n    fetchTotals();\n  }, []);\n  const transformTransactionData = (transactions, month, year) => {\n    const dailyData = {};\n    //get nimber of dayas in the selected month year\n    const daysInMonths = new Date(year, month, 0).getDate();\n    //initilaize each day in the month with default values\n    for (let day = 1; day <= daysInMonths; day++) {\n      dailyData[day] = {\n        day,\n        count: 0,\n        quantity: 0,\n        amount: 0\n      };\n    }\n    //process each transactions to accumulate daily counts, quantity and amount\n    transactions.forEach(transaction => {\n      const transactionDate = new Date(transaction.createdAt);\n      const transactionMonth = transactionDate.getMonth() + 1;\n      const transactionYear = transactionDate.getFullYear();\n\n      //If transaction falls withing selected month and year, accumulate data for the day\n      if (transactionMonth === month && transactionYear === year) {\n        const day = transactionDate.getDate();\n        dailyData[day].count += 1;\n        dailyData[day].quantity += transaction.totalProducts;\n        dailyData[day].amount += transaction.totalPrice;\n      }\n    });\n    //convert dailyData object for chart compatibility\n    return Object.values(dailyData);\n  };\n\n  //event handler for month selection or change\n  const handleMonthChange = e => {\n    setSelectedMonth(parseInt(e.target.value, 10));\n  };\n\n  //event handler for year selection or change\n  const handleYearChange = e => {\n    setSelectedYear(parseInt(e.target.value, 10));\n  };\n  const showMessage = msg => {\n    setMessage(msg);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, 4000);\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedData(\"count\"),\n          children: \"ToTal No Of Transactions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedData(\"quantity\"),\n          children: \"Product Quantity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSelectedData(\"amount\"),\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"month-select\",\n            children: \"Select Month:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"month-select\",\n            value: selectedMonth,\n            onChange: handleMonthChange,\n            children: Array.from({\n              length: 12\n            }, (_, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: i + 1,\n              children: new Date(0, i).toLocaleString(\"default\", {\n                month: \"long\"\n              })\n            }, i + 1, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"year-select\",\n            children: \"Select Year:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"year-select\",\n            value: selectedYear,\n            onChange: handleYearChange,\n            children: Array.from({\n              length: 5\n            }, (_, i) => {\n              const year = new Date().getFullYear() - i;\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: year,\n                children: year\n              }, year, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-section\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Daily Transactions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n              width: \"100%\",\n              height: 400,\n              children: /*#__PURE__*/_jsxDEV(LineChart, {\n                data: transactionData,\n                children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                  strokeDasharray: \"3 3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                  dataKey: \"day\",\n                  label: {\n                    value: \"Day\",\n                    position: \"insideBottomRight\",\n                    offset: -5\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: selectedData,\n                  stroke: \"#008080\",\n                  fillOpacity: 0.3,\n                  fill: \"#008080\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardPage, \"A3lSH45pTlv+rEDyPb9Bg0IfojU=\");\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useEffect","useState","Layout","ApiService","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","DashboardPage","_s","message","setMessage","selectedMonth","setSelectedMonth","Date","getMonth","selectedYear","setSelectedYear","getFullYear","selectedData","setSelectedData","transactionData","setTransactionData","total_sales","setTotalSales","total_price","setTotalPrice","fetchData","transactionResponse","getAllTransactions","status","transformTransactionData","transactions","error","_error$response","_error$response$data","showMessage","response","data","fetchTotals","salesResponse","countSales","totalSales","_error$response2","_error$response2$data","month","year","dailyData","daysInMonths","getDate","day","count","quantity","amount","forEach","transaction","transactionDate","createdAt","transactionMonth","transactionYear","totalProducts","totalPrice","Object","values","handleMonthChange","e","parseInt","target","value","handleYearChange","msg","setTimeout","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","htmlFor","id","onChange","Array","from","length","_","i","toLocaleString","width","height","strokeDasharray","dataKey","label","position","offset","type","stroke","fillOpacity","fill","_c","$RefreshReg$"],"sources":["C:/Users/m50053370/projet_git/IMS-react/frontend/src/pages/DashboardPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Layout from \"../component/Layout\";\r\nimport ApiService from \"../service/ApiService\";\r\n\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\n\r\nconst DashboardPage = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n  const [selectedData, setSelectedData] = useState(\"amount\");\r\n  //veruble to store and set transaction data formated for chart display\r\n  const [transactionData, setTransactionData] = useState({});\r\n\r\n  //fetch transaction data from the backend\r\n\r\n  const [total_sales, setTotalSales] = useState(0);\r\n  const [total_price, setTotalPrice] = useState(0);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const transactionResponse = await ApiService.getAllTransactions();\r\n        if (transactionResponse.status === 200) {\r\n            setTransactionData(\r\n            transformTransactionData(\r\n              transactionResponse.transactions,\r\n              selectedMonth,\r\n              selectedYear\r\n            )\r\n          );\r\n        }\r\n      } catch (error) {\r\n        showMessage(\r\n          error.response?.data?.message || \"Error Loggin in a User: \" + error\r\n        );\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [selectedMonth, selectedYear, selectedData]);\r\n  //fetch total sales and total price\r\n  useEffect(() => {\r\n    const fetchTotals = async () => {   \r\n      try {\r\n        const salesResponse = await ApiService.countSales();\r\n        if (salesResponse.status === 200) {\r\n          setTotalSales(salesResponse.totalSales);\r\n        \r\n        }\r\n      } catch (error) {\r\n        showMessage(\r\n          error.response?.data?.message || \"Error Fetching Totals: \" + error\r\n        );\r\n      }\r\n    };\r\n    fetchTotals();\r\n  }, []);\r\n  \r\n\r\n  const transformTransactionData = (transactions, month, year) => {\r\n    const dailyData = {};\r\n    //get nimber of dayas in the selected month year\r\n    const daysInMonths = new Date(year, month, 0).getDate();\r\n    //initilaize each day in the month with default values\r\n    for (let day = 1; day <= daysInMonths; day++) {\r\n      dailyData[day] = {\r\n        day,\r\n        count: 0,\r\n        quantity: 0,\r\n        amount: 0,\r\n      };\r\n    }\r\n    //process each transactions to accumulate daily counts, quantity and amount\r\n    transactions.forEach((transaction) => {\r\n      const transactionDate = new Date(transaction.createdAt);\r\n      const transactionMonth = transactionDate.getMonth() + 1;\r\n      const transactionYear = transactionDate.getFullYear();\r\n\r\n      //If transaction falls withing selected month and year, accumulate data for the day\r\n      if (transactionMonth === month && transactionYear === year) {\r\n        const day = transactionDate.getDate();\r\n        dailyData[day].count += 1;\r\n        dailyData[day].quantity += transaction.totalProducts;\r\n        dailyData[day].amount += transaction.totalPrice;\r\n      }\r\n    });\r\n    //convert dailyData object for chart compatibility\r\n    return Object.values(dailyData);\r\n  };\r\n\r\n  //event handler for month selection or change\r\n  const handleMonthChange = (e) => {\r\n    setSelectedMonth(parseInt(e.target.value, 10));\r\n  };\r\n\r\n  //event handler for year selection or change\r\n  const handleYearChange = (e) => {\r\n    setSelectedYear(parseInt(e.target.value, 10));\r\n  };\r\n\r\n  const showMessage = (msg) => {\r\n    setMessage(msg);\r\n    setTimeout(() => {\r\n      setMessage(\"\");\r\n    }, 4000);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      {message && <div className=\"message\">{message}</div>}\r\n      <div className=\"dashboard-page\">\r\n        <div className=\"button-group\">\r\n          <button onClick={() => setSelectedData(\"count\")}>\r\n            ToTal No Of Transactions\r\n          </button>\r\n          <button onClick={() => setSelectedData(\"quantity\")}>\r\n            Product Quantity\r\n          </button>\r\n          <button onClick={() => setSelectedData(\"amount\")}>Amount</button>\r\n\r\n        </div>\r\n\r\n        \r\n        <div className=\"dashboard-content\">\r\n          <div className=\"filter-section\">\r\n            <label htmlFor=\"month-select\">Select Month:</label>\r\n            <select id=\"month-select\" value={selectedMonth} onChange={handleMonthChange}>\r\n              {Array.from({ length: 12 }, (_, i) => (\r\n                <option key={i + 1} value={i + 1}>\r\n                  {new Date(0, i).toLocaleString(\"default\", { month: \"long\" })}\r\n                </option>\r\n              ))}\r\n            </select>\r\n\r\n            <label htmlFor=\"year-select\">Select Year:</label>\r\n            <select id=\"year-select\" value={selectedYear} onChange={handleYearChange}>\r\n              {Array.from({ length: 5 }, (_, i) => {\r\n                const year = new Date().getFullYear() - i;\r\n                return (\r\n                  <option key={year} value={year}>\r\n                    {year}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Display the chart */}\r\n          <div className=\"chart-section\">\r\n            <div className=\"chart-container\">\r\n                <h3>Daily Transactions</h3>\r\n                <ResponsiveContainer width=\"100%\" height={400}>\r\n                    <LineChart data={transactionData}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                        <XAxis dataKey=\"day\" label={{value: \"Day\", position: \"insideBottomRight\", offset: -5}}/>\r\n                        <YAxis/>\r\n                        <Tooltip/>\r\n                        <Legend/>\r\n                        <Line type={\"monotone\"}\r\n                        dataKey={selectedData}\r\n                        stroke=\"#008080\"\r\n                        fillOpacity={0.3}\r\n                        fill=\"#008080\"\r\n                        />\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\nexport default DashboardPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}